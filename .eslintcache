[{"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/index.js":"1","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/reportWebVitals.js":"2","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/App.js":"3","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/utils/numModifiers.js":"4","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/contexts/context.js":"5","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/utils/stringModifiers.js":"6","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/Nav.js":"7","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/AboutContainer.js":"8","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/ContentContainer.js":"9","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/DataComponent.js":"10","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/SideControlls.js":"11","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/GraphContainer.js":"12","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/GraphComponent.js":"13","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/TipComponent.js":"14"},{"size":500,"mtime":1606951120857,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1606951120857,"results":"17","hashOfConfig":"16"},{"size":6088,"mtime":1610339431953,"results":"18","hashOfConfig":"16"},{"size":1449,"mtime":1607117462451,"results":"19","hashOfConfig":"16"},{"size":77,"mtime":1606969719892,"results":"20","hashOfConfig":"16"},{"size":1598,"mtime":1607030938654,"results":"21","hashOfConfig":"16"},{"size":495,"mtime":1610210142256,"results":"22","hashOfConfig":"16"},{"size":2886,"mtime":1610337177427,"results":"23","hashOfConfig":"16"},{"size":5410,"mtime":1610339783183,"results":"24","hashOfConfig":"16"},{"size":1974,"mtime":1610213413564,"results":"25","hashOfConfig":"16"},{"size":6926,"mtime":1610258194792,"results":"26","hashOfConfig":"16"},{"size":17890,"mtime":1610258277620,"results":"27","hashOfConfig":"16"},{"size":6774,"mtime":1610331722187,"results":"28","hashOfConfig":"16"},{"size":587,"mtime":1610328021434,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1qct18r",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/index.js",[],["62","63"],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/reportWebVitals.js",[],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/App.js",[],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/utils/numModifiers.js",[],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/contexts/context.js",[],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/utils/stringModifiers.js",[],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/Nav.js",[],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/AboutContainer.js",[],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/ContentContainer.js",["64","65","66","67","68","69","70","71","72"],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/DataComponent.js",["73","74"],"import React, { useState } from 'react'\nimport GraphContainer from './GraphContainer'\n\nconst DataComponent = (props) => {\n    \n    const [graphOpen, setGraphOpen] = useState(false)\n\n    const toggleGraph = () => {\n        if(props.graphOpen){\n            props.setGraphOpen(false)\n        } else {\n            props.setGraphOpen(true)\n            props.setGraphOwner(props.locationName)\n        }\n    }\n\n    if(props.graphOpen){\n        return (\n        <div className='outer-container'>\n            <div onClick={toggleGraph} className='items-container data'>\n                <p className='name-item'>{props.locationName}</p>\n                <div className='other-items'>\n                    <p className='row-item'>{props.totalCases}</p>\n                    <p className='row-item'>{props.totalDeaths}</p>\n                    <p className='row-item'>{props.casesPerMil}</p>\n                    <p className='row-item'>{props.deathsPerMil}</p>\n                    <p className='row-item'>{props.deathRate}%</p>\n                </div>\n            </div>        \n                \n                <GraphContainer \n                    abbreviation={props.abbreviation} \n                    locationType={props.locationType}\n                    locationName={props.locationName}\n                />\n            \n        </div>\n        \n        )\n    }\n\n    return(\n    <div className='outer-container'>\n        <div onClick={toggleGraph} className='items-container data'>\n            <p className='name-item'>{props.locationName}</p>\n            <div className='other-items'>\n                <p className='row-item'>{props.totalCases}</p>\n                <p className='row-item'>{props.totalDeaths}</p>\n                <p className='row-item'>{props.casesPerMil}</p>\n                <p className='row-item'>{props.deathsPerMil}</p>\n                <p className='row-item'>{props.deathRate}%</p>\n            </div>\n        </div>  \n    </div>\n    )\n}\n\nexport default DataComponent","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/SideControlls.js",["75","76","77","78","79"],"import React, { useContext, useEffect, useLayoutEffect, useState } from 'react'\nimport { Context } from '../contexts/context'\nimport Select from 'react-select'\n\n\nconst SideControlls = () => {\n\n    const { currentLocationType, clipBoard, filterString, sortMethod } = useContext(Context)\n    const [locationType, setLocationType] = currentLocationType\n    const [filterStr, setFilterStr] = filterString\n    const [sort, setSort] = sortMethod\n\n    const [clipBoardData, setClipBoardData] = clipBoard\n\n    const [sortOrder, setSortOrder] = useState('low-high')\n    const [sortBy, setSortBy] = useState('alphabetical')\n\n    const [clipBoardDisplay, setClipBoardDisplay] = useState({\n        cases:[{locationName: '', x: new Date(), y:0}],\n        deaths: [{locationName: '', x: new Date(), y:0}]\n      })\n\n    const selectLocationType = (e) => {\n        setLocationType(e.value)\n        setFilterStr('')\n    }\n\n    const setFilterString = (e) => {\n        setFilterStr(e.target.value)\n    }\n\n    const changeSortBy = (e) => {\n        setSortBy(e.value)\n    }\n\n    const changeSortOrder = (e) => {\n        setSortOrder(e.value)\n    }\n\n    useEffect(() => {\n        setSort([sortOrder, sortBy])\n    }, [...sort, sortBy, sortOrder])\n\n    useEffect(() => {\n        setClipBoardDisplay(clipBoardData)\n    },[clipBoardData])\n\n    //react select component options arrays\n    const locationOptions = [\n        { value: 'countries' , label: 'Countries' },\n        { value: 'states' , label: 'States' }\n    ]\n\n    const sortByOptions = [\n        { value: 'alphabetical', label: 'Alphabetical' },\n        { value: 'cases', label: 'Cases' },\n        { value: 'deaths', label: 'Deaths'},\n        { value: 'cases/mil', label: 'Cases/Mil'},\n        { value: 'deaths/mil', label: 'Deaths/Mil'},\n        { value: 'deathRate', label: 'Death Rate'}\n    ]\n\n    const sortOrderOptions = [\n        { value: 'low-high', label: 'Low to High'},\n        { value: 'high-low', label: 'High to Low'}\n    ]\n\n    return(\n        <div className=\"side-controlls\">\n            <input \n                type=\"text\"\n                placeholder=\"Search\"\n                value={filterStr}\n                onChange={setFilterString}\n            />\n            <p>Location Type</p>\n            <Select \n                className='select'\n                onChange={selectLocationType} \n                options={locationOptions}\n                defaultValue={ {value:'countries', label: 'Countries'} }\n                isSearchable={false}\n                theme={(theme) => ({\n                    ...theme,\n                    colors: {\n                    ...theme.colors,\n                      primary25: '#daedee',\n                      primary: '#40a0a0',\n                      primary50: '#daedee'\n                    },\n                  })}\n                styles={{\n                    control: (provided, state) => ({\n                        ...provided,\n                        minHeight: '30px',\n                        height: '30px',\n                        boxShadow: state.isFocused ? null : null,\n                      }),\n                  \n                      valueContainer: (provided, state) => ({\n                        ...provided,\n                        height: '30px',\n                        padding: '0 6px'\n                      }),\n                  \n                      input: (provided, state) => ({\n                        ...provided,\n                        margin: '0px',\n                      }),\n                      indicatorsContainer: (provided, state) => ({\n                        ...provided,\n                        height: '30px',\n                      }),\n                  \n                }}\n            /> \n            <p>Sort By</p>\n            <Select \n                className='select'\n                onChange={changeSortBy}\n                options={sortByOptions}\n                defaultValue={{ value:'alphabetical', label: 'Alphabetical'}}\n                isSearchable={false}\n                theme={(theme) => ({\n                    ...theme,\n                    colors: {\n                    ...theme.colors,\n                      primary25: '#daedee',\n                      primary: '#40a0a0',\n                      primary50: '#daedee'\n                    },\n                  })}\n                styles={{\n                    control: (provided, state) => ({\n                        ...provided,\n                        minHeight: '30px',\n                        height: '30px',\n                        boxShadow: state.isFocused ? null : null,\n                      }),\n                  \n                      valueContainer: (provided, state) => ({\n                        ...provided,\n                        height: '30px',\n                        padding: '0 6px'\n                      }),\n                  \n                      input: (provided, state) => ({\n                        ...provided,\n                        margin: '0px',\n                      }),\n                      indicatorsContainer: (provided, state) => ({\n                        ...provided,\n                        height: '30px',\n                      }),\n                  \n                }}\n            />\n            <p>Sort Order</p>\n            <Select \n                className='select'\n                onChange={changeSortOrder}\n                options={sortOrderOptions}\n                defaultValue = {{ value: 'low-high', label: 'Low to High'}}\n                isSearchable={false}\n                theme={(theme) => ({\n                    ...theme,\n                    colors: {\n                    ...theme.colors,\n                      primary25: '#daedee',\n                      primary: '#40a0a0',\n                      primary50: '#daedee'\n                    },\n                  })}\n                styles={{\n                    control: (provided, state) => ({\n                        ...provided,\n                        minHeight: '30px',\n                        height: '30px',\n                        boxShadow: state.isFocused ? null : null,\n                      }),\n                  \n                      valueContainer: (provided, state) => ({\n                        ...provided,\n                        height: '30px',\n                        padding: '0 6px'\n                      }),\n                  \n                      input: (provided, state) => ({\n                        ...provided,\n                        margin: '0px',\n                      }),\n                      indicatorsContainer: (provided, state) => ({\n                        ...provided,\n                        height: '30px',\n                      }),\n                  \n                }}\n            />\n        \n            <p className='clipboard-indicator'>Saved: <span className='clipboard'>{clipBoardDisplay.cases[0].locationName}</span></p>\n            \n        </div>\n    )\n}\n\nexport default SideControlls","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/GraphContainer.js",["80"],"import React, { useContext, useEffect, useLayoutEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Select from 'react-select'\r\nimport { Context } from '../contexts/context'\r\n\r\nimport { convertStateName } from '../utils/stringModifiers'\r\n\r\nimport GraphComponent from './GraphComponent'\r\n\r\nconst GraphContainer = (props) => {\r\n    const { graphDataStates, graphDataCountries, clipBoard } = useContext(Context)\r\n    const [graphStatesStore, setGraphStatesStore] = graphDataStates\r\n    const [graphCountriesStore, setGraphCountriesStore] = graphDataCountries\r\n    const [clipBoardData, setClipBoardData] = clipBoard\r\n\r\n    const [clipBoardButton, setClipBoardButton] = useState('Compare')\r\n    const [clipBoardStatus, setClipBoardStatus] = useState(false)\r\n\r\n    const [currentGraphData, setCurrentGraphData] = useState({\r\n        cases:[{locationName: '', x: new Date(), y:0}],\r\n        deaths: [{locationName: '', x: new Date(), y:0}]\r\n    })\r\n\r\n    const [countryCasesData, setCountryCasesData] = useState([{locationName: '', x: new Date(), y:0}])\r\n    const [countryDeathsData, setCountryDeathsData] = useState([{locationName: '', x: new Date(), y:0}])\r\n\r\n    const [graphDataType, setGraphDataType] = useState('cases')\r\n\r\n    useEffect(() => {\r\n        if (props.locationType === 'country'){\r\n            if(props.abbreviation in graphCountriesStore){\r\n                setCurrentGraphData(graphCountriesStore[props.abbreviation])\r\n            } else {\r\n                axios.get(`https://cors-anywhere.herokuapp.com/https://covid-api.mmediagroup.fr/v1/history?ab=${props.abbreviation}&status=Confirmed`)\r\n                    .then(res => {\r\n                        const caseData = res.data.All.dates\r\n                        const formattedDataCases = []\r\n                        for(const date in caseData){\r\n                            if(parseInt(date.slice(8))%3===0){\r\n                                formattedDataCases.push({\r\n                                    locationName: props.locationName,\r\n                                    x: new Date(parseInt(date.slice(0,4)), parseInt(date.slice(5,7))-1, parseInt(date.slice(8))),\r\n                                    y: caseData[date]\r\n                                })\r\n                            }\r\n                            \r\n                        }\r\n                        setCountryCasesData(formattedDataCases)\r\n                        let countryData\r\n                        if (props.abbreviation in graphCountriesStore){\r\n                            let newGraphCountriesStore = graphCountriesStore\r\n                            let item = newGraphCountriesStore[props.abbreviation]\r\n                            item.cases = formattedDataCases\r\n                            newGraphCountriesStore = {...newGraphCountriesStore, item}\r\n                            setGraphCountriesStore(newGraphCountriesStore)\r\n                        } else {\r\n                            countryData = {cases: formattedDataCases}\r\n                            let newGraphCountriesStore = graphCountriesStore\r\n                            newGraphCountriesStore[props.abbreviation] = countryData\r\n                            setGraphCountriesStore(newGraphCountriesStore)\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err)\r\n                    })\r\n                axios.get(`https://cors-anywhere.herokuapp.com/https://covid-api.mmediagroup.fr/v1/history?ab=${props.abbreviation}&status=Deaths`)\r\n                    .then(res => {\r\n                        const deathsData = res.data.All.dates\r\n                        const formattedDataDeaths = []\r\n                        for(const date in deathsData){\r\n                            if (parseInt(date.slice(8))%3===0){\r\n                                formattedDataDeaths.push({\r\n                                    locationName: props.locationName,\r\n                                    x: new Date(parseInt(date.slice(0,4)), parseInt(date.slice(5,7))-1, parseInt(date.slice(8))),\r\n                                    y: deathsData[date]\r\n                                }) \r\n                            }\r\n                            \r\n                        }\r\n                        setCountryDeathsData(formattedDataDeaths)\r\n                        let countryData\r\n                        if (props.abbreviation in graphCountriesStore){\r\n                            let newGraphCountriesStore = graphCountriesStore\r\n                            let item = newGraphCountriesStore[props.abbreviation]\r\n                            item.deaths = formattedDataDeaths\r\n                            newGraphCountriesStore = {...newGraphCountriesStore, item}\r\n                            setGraphCountriesStore(newGraphCountriesStore)\r\n                        } else {\r\n                            countryData = {deaths: formattedDataDeaths}\r\n                            let newGraphCountriesStore = graphCountriesStore\r\n                            newGraphCountriesStore[props.abbreviation] = countryData\r\n                            setGraphCountriesStore(newGraphCountriesStore)\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err)\r\n                    })\r\n            }\r\n        } else if (props.locationType === 'state'){\r\n            if(props.abbreviation in graphStatesStore){\r\n                setCurrentGraphData(graphStatesStore[props.abbreviation])\r\n            } else {\r\n                axios.get(`https://api.covidtracking.com/v1/states/${props.abbreviation}/daily.json`)\r\n                    .then(res => {\r\n                        const data = res.data\r\n                        const formattedDataCases = []\r\n                        const formattedDataDeaths = []\r\n                        for( let i=0; i<data.length;i++){\r\n                            const dateString = data[i].date.toString()\r\n                            if (parseInt(dateString.slice(6))%3===0){\r\n                                formattedDataCases.push({\r\n                                    locationName: convertStateName(data[i].state),\r\n                                    x: new Date(parseInt(dateString.slice(0,4)), parseInt(dateString.slice(4,6))-1, parseInt(dateString.slice(6))),\r\n                                    y: data[i].positive\r\n                                })\r\n                                formattedDataDeaths.push({\r\n                                    locationName: convertStateName(data[i].state),\r\n                                    x: new Date(parseInt(dateString.slice(0,4)), parseInt(dateString.slice(4,6))-1, parseInt(dateString.slice(6))),\r\n                                    y: data[i].death\r\n                                })\r\n                            }\r\n                            \r\n                        }\r\n                        setCurrentGraphData({\r\n                            cases: formattedDataCases,\r\n                            deaths: formattedDataDeaths\r\n                        })\r\n                        let newGraphStatesStore = graphStatesStore\r\n                        newGraphStatesStore[props.abbreviation] = {\r\n                            cases: formattedDataCases,\r\n                            deaths: formattedDataDeaths\r\n                        }\r\n                        setGraphStatesStore(newGraphStatesStore)\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err)\r\n                    })\r\n            }\r\n        }\r\n    },[])\r\n\r\n    useLayoutEffect(() => {\r\n        setCurrentGraphData({\r\n            cases:countryCasesData,\r\n            deaths:countryDeathsData\r\n        })\r\n    }, [countryCasesData, countryDeathsData])\r\n\r\n    const toggleClipBoard = () => {\r\n        if(clipBoardStatus){\r\n            setClipBoardStatus(false)\r\n            setClipBoardButton('Compare')\r\n        } else {\r\n            setClipBoardStatus(true)\r\n            setClipBoardButton('Back')\r\n        }\r\n    }\r\n\r\n    const saveToClipBoard = () => {\r\n        setClipBoardData(currentGraphData)\r\n    }\r\n\r\n    const changeDataType = (e) => {\r\n        setGraphDataType(e.value)\r\n    }\r\n\r\n    //options array for select component\r\n    const dataTypeOptions = [\r\n        { value: 'cases', label: 'Cases' },\r\n        { value: 'deaths', label: 'Deaths' }\r\n    ]\r\n\r\n    if(graphDataType === 'cases'){\r\n        if(!clipBoardStatus){\r\n            return(\r\n                <div className='graph-outer-container'>\r\n                    <div className='top-row'>\r\n                    <Select \r\n                        className='select'\r\n                        options={dataTypeOptions}\r\n                        onChange={changeDataType}\r\n                        defaultValue={{ value: 'cases', label:'Cases' }}\r\n                        isSearchable={false}\r\n                        theme={(theme) => ({\r\n                            ...theme,\r\n                            colors: {\r\n                            ...theme.colors,\r\n                              primary25: '#daedee',\r\n                              primary: '#40a0a0',\r\n                              primary50: '#daedee'\r\n                            },\r\n                          })}\r\n                        styles={{\r\n                            control: (provided, state) => ({\r\n                                ...provided,\r\n                                minHeight: '30px',\r\n                                height: '30px',\r\n                                boxShadow: state.isFocused ? null : null,\r\n                              }),\r\n                          \r\n                              valueContainer: (provided, state) => ({\r\n                                ...provided,\r\n                                height: '30px',\r\n                                padding: '0 6px'\r\n                              }),\r\n                          \r\n                              input: (provided, state) => ({\r\n                                ...provided,\r\n                                margin: '0px',\r\n                              }),\r\n                              indicatorsContainer: (provided, state) => ({\r\n                                ...provided,\r\n                                height: '30px',\r\n                              }),\r\n                          \r\n                        }}\r\n                    />\r\n                        <div className='button-container'>\r\n                            <button onClick={saveToClipBoard}>Save</button>\r\n                            <button onClick={toggleClipBoard}>{clipBoardButton}</button>\r\n                        </div>\r\n                    </div>\r\n                    <GraphComponent data={{currentSet: currentGraphData.cases}}/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return(\r\n            <div className='graph-outer-container'>\r\n                <div className='top-row'>\r\n                <Select \r\n                        className='select'\r\n                        options={dataTypeOptions}\r\n                        onChange={changeDataType}\r\n                        defaultValue={{ value: 'cases', label:'Cases' }}\r\n                        isSearchable={false}\r\n                        theme={(theme) => ({\r\n                            ...theme,\r\n                            colors: {\r\n                            ...theme.colors,\r\n                              primary25: '#daedee',\r\n                              primary: '#40a0a0',\r\n                              primary50: '#daedee'\r\n                            },\r\n                          })}\r\n                        styles={{\r\n                            control: (provided, state) => ({\r\n                                ...provided,\r\n                                minHeight: '30px',\r\n                                height: '30px',\r\n                                boxShadow: state.isFocused ? null : null,\r\n                              }),\r\n                          \r\n                              valueContainer: (provided, state) => ({\r\n                                ...provided,\r\n                                height: '30px',\r\n                                padding: '0 6px'\r\n                              }),\r\n                          \r\n                              input: (provided, state) => ({\r\n                                ...provided,\r\n                                margin: '0px',\r\n                              }),\r\n                              indicatorsContainer: (provided, state) => ({\r\n                                ...provided,\r\n                                height: '30px',\r\n                              }),\r\n                          \r\n                        }}\r\n                    />\r\n                    <div className='button-container'>\r\n                        <button onClick={toggleClipBoard}>{clipBoardButton}</button>\r\n                    </div>\r\n                </div>\r\n                <GraphComponent data={{currentSet: currentGraphData.cases, comparisonSet: clipBoardData.cases}}/>\r\n            </div>\r\n        )\r\n    } else if(graphDataType === 'deaths'){\r\n        if(!clipBoardStatus){\r\n            return(\r\n                <div className='graph-outer-container'>\r\n                    <div className='top-row'>\r\n                    <Select \r\n                        className='select'\r\n                        options={dataTypeOptions}\r\n                        onChange={changeDataType}\r\n                        defaultValue={{ value: 'cases', label:'Cases' }}\r\n                        isSearchable={false}\r\n                        theme={(theme) => ({\r\n                            ...theme,\r\n                            colors: {\r\n                            ...theme.colors,\r\n                              primary25: '#daedee',\r\n                              primary: '#40a0a0',\r\n                              primary50: '#daedee'\r\n                            },\r\n                          })}\r\n                        styles={{\r\n                            control: (provided, state) => ({\r\n                                ...provided,\r\n                                minHeight: '30px',\r\n                                height: '30px',\r\n                                boxShadow: state.isFocused ? null : null,\r\n                              }),\r\n                          \r\n                              valueContainer: (provided, state) => ({\r\n                                ...provided,\r\n                                height: '30px',\r\n                                padding: '0 6px'\r\n                              }),\r\n                          \r\n                              input: (provided, state) => ({\r\n                                ...provided,\r\n                                margin: '0px',\r\n                              }),\r\n                              indicatorsContainer: (provided, state) => ({\r\n                                ...provided,\r\n                                height: '30px',\r\n                              }),\r\n                          \r\n                        }}\r\n                    />\r\n                        <div className='button-container'>\r\n                            <button onClick={saveToClipBoard}>Save</button>\r\n                            <button onClick={toggleClipBoard}>{clipBoardButton}</button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <GraphComponent data={{currentSet: currentGraphData.deaths}}/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return(\r\n            <div className='graph-outer-container'>\r\n                <div className='top-row'>\r\n                    <Select \r\n                        className='select'\r\n                        options={dataTypeOptions}\r\n                        onChange={changeDataType}\r\n                        defaultValue={{ value: 'cases', label:'Cases' }}\r\n                        isSearchable={false}\r\n                        theme={(theme) => ({\r\n                            ...theme,\r\n                            colors: {\r\n                            ...theme.colors,\r\n                              primary25: '#daedee',\r\n                              primary: '#40a0a0',\r\n                            },\r\n                          })}\r\n                        styles={{\r\n                            control: (provided, state) => ({\r\n                                ...provided,\r\n                                minHeight: '30px',\r\n                                height: '30px',\r\n                                boxShadow: state.isFocused ? null : null,\r\n                              }),\r\n                          \r\n                              valueContainer: (provided, state) => ({\r\n                                ...provided,\r\n                                height: '30px',\r\n                                padding: '0 6px'\r\n                              }),\r\n                          \r\n                              input: (provided, state) => ({\r\n                                ...provided,\r\n                                margin: '0px',\r\n                              }),\r\n                              indicatorsContainer: (provided, state) => ({\r\n                                ...provided,\r\n                                height: '30px',\r\n                              }),\r\n                          \r\n                        }}\r\n                    />\r\n                    <div className='button-container'>\r\n                        <button onClick={toggleClipBoard}>{clipBoardButton}</button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <GraphComponent data={{currentSet: currentGraphData.deaths, comparisonSet: clipBoardData.deaths}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default GraphContainer","/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/GraphComponent.js",[],"/Users/erikscow/Documents/web-dev/portfolio/covid-tracker/src/components/TipComponent.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":17,"column":23,"nodeType":"87","messageId":"88","endLine":17,"endColumn":35},{"ruleId":"85","severity":1,"message":"89","line":18,"column":20,"nodeType":"87","messageId":"88","endLine":18,"endColumn":29},{"ruleId":"85","severity":1,"message":"90","line":21,"column":26,"nodeType":"87","messageId":"88","endLine":21,"endColumn":41},{"ruleId":"85","severity":1,"message":"91","line":22,"column":23,"nodeType":"87","messageId":"88","endLine":22,"endColumn":35},{"ruleId":"85","severity":1,"message":"92","line":23,"column":18,"nodeType":"87","messageId":"88","endLine":23,"endColumn":25},{"ruleId":"85","severity":1,"message":"93","line":28,"column":12,"nodeType":"87","messageId":"88","endLine":28,"endColumn":18},{"ruleId":"85","severity":1,"message":"94","line":28,"column":20,"nodeType":"87","messageId":"88","endLine":28,"endColumn":29},{"ruleId":"95","severity":1,"message":"96","line":56,"column":8,"nodeType":"97","endLine":56,"endColumn":19,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":93,"column":7,"nodeType":"97","endLine":93,"endColumn":13,"suggestions":"100"},{"ruleId":"85","severity":1,"message":"101","line":6,"column":12,"nodeType":"87","messageId":"88","endLine":6,"endColumn":21},{"ruleId":"85","severity":1,"message":"102","line":6,"column":23,"nodeType":"87","messageId":"88","endLine":6,"endColumn":35},{"ruleId":"85","severity":1,"message":"103","line":1,"column":40,"nodeType":"87","messageId":"88","endLine":1,"endColumn":55},{"ruleId":"85","severity":1,"message":"104","line":9,"column":12,"nodeType":"87","messageId":"88","endLine":9,"endColumn":24},{"ruleId":"85","severity":1,"message":"105","line":13,"column":27,"nodeType":"87","messageId":"88","endLine":13,"endColumn":43},{"ruleId":"95","severity":1,"message":"106","line":42,"column":8,"nodeType":"97","endLine":42,"endColumn":36,"suggestions":"107"},{"ruleId":"95","severity":1,"message":"108","line":42,"column":9,"nodeType":"109","endLine":42,"endColumn":16},{"ruleId":"95","severity":1,"message":"110","line":140,"column":7,"nodeType":"97","endLine":140,"endColumn":9,"suggestions":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'setCountries' is assigned a value but never used.","Identifier","unusedVar","'setStates' is assigned a value but never used.","'setLocationType' is assigned a value but never used.","'setFilterStr' is assigned a value but never used.","'setSort' is assigned a value but never used.","'sorted' is assigned a value but never used.","'setSorted' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataSet'. Either include it or remove the dependency array.","ArrayExpression",["114"],"React Hook useEffect has a missing dependency: 'searched'. Either include it or remove the dependency array. You can also do a functional update 'setSearched(s => ...)' if you only need 'searched' in the 'setSearched' call.",["115"],"'graphOpen' is assigned a value but never used.","'setGraphOpen' is assigned a value but never used.","'useLayoutEffect' is defined but never used.","'locationType' is assigned a value but never used.","'setClipBoardData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setSort'. Either include it or remove the dependency array.",["116"],"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","SpreadElement","React Hook useEffect has missing dependencies: 'graphCountriesStore', 'graphStatesStore', 'props.abbreviation', 'props.locationName', 'props.locationType', 'setGraphCountriesStore', and 'setGraphStatesStore'. Either include them or remove the dependency array. If 'setCurrentGraphData' needs the current value of 'props.abbreviation', you can also switch to useReducer instead of useState and read 'props.abbreviation' in the reducer.",["117"],"no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [dataSet, filterStr]",{"range":"126","text":"127"},"Update the dependencies array to be: [searched, sort]",{"range":"128","text":"129"},"Update the dependencies array to be: [setSort, sortBy, sortOrder]",{"range":"130","text":"131"},"Update the dependencies array to be: [graphCountriesStore, graphStatesStore, props.abbreviation, props.locationName, props.locationType, setGraphCountriesStore, setGraphStatesStore]",{"range":"132","text":"133"},[1716,1727],"[dataSet, filterStr]",[2865,2871],"[searched, sort]",[1195,1223],"[setSort, sortBy, sortOrder]",[7608,7610],"[graphCountriesStore, graphStatesStore, props.abbreviation, props.locationName, props.locationType, setGraphCountriesStore, setGraphStatesStore]"]
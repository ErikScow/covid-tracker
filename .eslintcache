[{"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\index.js":"1","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\reportWebVitals.js":"2","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\App.js":"3","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\contexts\\context.js":"4","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\utils\\numModifiers.js":"5","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\utils\\stringModifiers.js":"6","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\AboutContainer.js":"7","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\Nav.js":"8","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\ContentContainer.js":"9","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\DataComponent.js":"10","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\SideControlls.js":"11","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\GraphContainer.js":"12","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\GraphComponent.js":"13"},{"size":500,"mtime":1607014562733,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607014562734,"results":"16","hashOfConfig":"15"},{"size":6056,"mtime":1607401362336,"results":"17","hashOfConfig":"15"},{"size":77,"mtime":1607014562732,"results":"18","hashOfConfig":"15"},{"size":1449,"mtime":1607103897341,"results":"19","hashOfConfig":"15"},{"size":1598,"mtime":1607046615709,"results":"20","hashOfConfig":"15"},{"size":138,"mtime":1607046615702,"results":"21","hashOfConfig":"15"},{"size":357,"mtime":1607046615704,"results":"22","hashOfConfig":"15"},{"size":2733,"mtime":1607402345647,"results":"23","hashOfConfig":"15"},{"size":1910,"mtime":1607397424089,"results":"24","hashOfConfig":"15"},{"size":1146,"mtime":1607403136431,"results":"25","hashOfConfig":"15"},{"size":8820,"mtime":1607397424090,"results":"26","hashOfConfig":"15"},{"size":6669,"mtime":1607397424089,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"c1h03o",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\index.js",[],["58","59"],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\reportWebVitals.js",[],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\App.js",[],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\contexts\\context.js",[],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\utils\\numModifiers.js",[],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\utils\\stringModifiers.js",[],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\AboutContainer.js",[],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\Nav.js",[],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\ContentContainer.js",["60","61","62","63","64"],"import React, { useContext, useEffect, useState } from 'react'\nimport { Context } from '../contexts/context'\n\nimport SideControlls from './SideControlls'\nimport DataComponent from './DataComponent'\n\nconst ContentContainer = (props) => {\n    \n\n    const { countriesData, statesData, currentLocationType, filterString } = useContext(Context)\n    const [countries, setCountries] = countriesData\n    const [states, setStates] = statesData\n\n    //modifiers for display data (controlled by SideControlls.js)\n    const [locationType, setLocationType] = currentLocationType\n    const [filterStr, setFilterStr] = filterString\n\n    //modified data to display\n    const [dataSet, setDataSet] = useState(countries)\n    const [searched, setSearched] = useState(dataSet)\n\n    useEffect(() => {\n        setSearched(dataSet)\n    }, [dataSet])\n    \n\n    useEffect(() => {\n        if (locationType === 'countries'){\n            setDataSet(countries)\n        } else {\n            setDataSet(states)\n        }\n    }, [locationType, countries, states])\n\n\n    useEffect(() => {\n        console.log(filterStr)\n        const filteredData = dataSet.filter(location => {\n            return location.locationName.toLowerCase().includes(filterStr.toLowerCase())\n        })\n        console.log(filteredData)\n        setSearched(filteredData)\n    }, [filterStr])\n    \n\n    return(\n        <div className='content-container'>\n            <SideControlls/>\n            <div className='container'>\n                <div className='columns'>\n                    <p className='name-row'>Location</p>\n                    <div className='other-rows'>\n                        <p className='row-item'>Cases</p>\n                        <p className='row-item'>Deaths</p>\n                        <p className='row-item'>Cases/Mil</p>\n                        <p className='row-item'>Deaths/Mil</p>\n                        <p className='row-item'>Death Rate</p>\n                    </div>\n                   \n                </div>\n            </div>\n            \n            {searched.map((location,index) => {\n                return <DataComponent \n                        key={location.locationName} \n                        locationName={location.locationName} \n                        locationType={location.locationType}\n                        totalCases={location.totalCases}\n                        totalDeaths={location.totalDeaths}\n                        casesPerMil={location.casesPerMil}\n                        deathsPerMil={location.deathsPerMil}\n                        deathRate={location.deathRate}\n                        abbreviation={location.abbreviation}\n\n                        />\n            })}\n        </div>\n    )\n}\n\nexport default ContentContainer","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\DataComponent.js",[],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\SideControlls.js",["65"],"C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\GraphContainer.js",["66"],"import React, { useContext, useEffect, useLayoutEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Context } from '../contexts/context'\r\n\r\nimport { convertStateName } from '../utils/stringModifiers'\r\n\r\nimport GraphComponent from './GraphComponent'\r\n\r\nconst GraphContainer = (props) => {\r\n    const { graphDataStates, graphDataCountries, clipBoard } = useContext(Context)\r\n    const [graphStatesStore, setGraphStatesStore] = graphDataStates\r\n    const [graphCountriesStore, setGraphCountriesStore] = graphDataCountries\r\n    const [clipBoardData, setClipBoardData] = clipBoard\r\n\r\n    const [clipBoardButton, setClipBoardButton] = useState('Compare Clipboard')\r\n    const [clipBoardStatus, setClipBoardStatus] = useState(false)\r\n\r\n    const [currentGraphData, setCurrentGraphData] = useState({\r\n        cases:[{locationName: '', x: new Date(), y:0}],\r\n        deaths: [{locationName: '', x: new Date(), y:0}]\r\n    })\r\n\r\n    const [countryCasesData, setCountryCasesData] = useState([])\r\n    const [countryDeathsData, setCountryDeathsData] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (props.locationType === 'country'){\r\n            if(props.abbreviation in graphCountriesStore){\r\n                setCurrentGraphData(graphCountriesStore[props.abbreviation])\r\n            } else {\r\n                axios.get(`https://cors-anywhere.herokuapp.com/https://covid-api.mmediagroup.fr/v1/history?ab=${props.abbreviation}&status=Confirmed`)\r\n                    .then(res => {\r\n                        const caseData = res.data.All.dates\r\n                        console.log(res)\r\n                        const formattedDataCases = []\r\n                        for(const date in caseData){\r\n                            if(parseInt(date.slice(8))%3===0){\r\n                                formattedDataCases.push({\r\n                                    locationName: props.locationName,\r\n                                    x: new Date(parseInt(date.slice(0,4)), parseInt(date.slice(5,7))-1, parseInt(date.slice(8))),\r\n                                    y: caseData[date]\r\n                                })\r\n                            }\r\n                            \r\n                        }\r\n                        setCountryCasesData(formattedDataCases)\r\n                        let countryData\r\n                        if (props.abbreviation in graphCountriesStore){\r\n                            let newGraphCountriesStore = graphCountriesStore\r\n                            let item = newGraphCountriesStore[props.abbreviation]\r\n                            item.cases = formattedDataCases\r\n                            newGraphCountriesStore = {...newGraphCountriesStore, item}\r\n                            setGraphCountriesStore(newGraphCountriesStore)\r\n                        } else {\r\n                            countryData = {cases: formattedDataCases}\r\n                            let newGraphCountriesStore = graphCountriesStore\r\n                            newGraphCountriesStore[props.abbreviation] = countryData\r\n                            setGraphCountriesStore(newGraphCountriesStore)\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err)\r\n                    })\r\n                axios.get(`https://cors-anywhere.herokuapp.com/https://covid-api.mmediagroup.fr/v1/history?ab=${props.abbreviation}&status=Deaths`)\r\n                    .then(res => {\r\n                        const deathsData = res.data.All.dates\r\n                        console.log(res)\r\n                        const formattedDataDeaths = []\r\n                        for(const date in deathsData){\r\n                            if (parseInt(date.slice(8))%3===0){\r\n                                formattedDataDeaths.push({\r\n                                    locationName: props.locationName,\r\n                                    x: new Date(parseInt(date.slice(0,4)), parseInt(date.slice(5,7))-1, parseInt(date.slice(8))),\r\n                                    y: deathsData[date]\r\n                                }) \r\n                            }\r\n                            \r\n                        }\r\n                        setCountryDeathsData(formattedDataDeaths)\r\n                        let countryData\r\n                        if (props.abbreviation in graphCountriesStore){\r\n                            let newGraphCountriesStore = graphCountriesStore\r\n                            let item = newGraphCountriesStore[props.abbreviation]\r\n                            item.deaths = formattedDataDeaths\r\n                            newGraphCountriesStore = {...newGraphCountriesStore, item}\r\n                            setGraphCountriesStore(newGraphCountriesStore)\r\n                        } else {\r\n                            countryData = {deaths: formattedDataDeaths}\r\n                            let newGraphCountriesStore = graphCountriesStore\r\n                            newGraphCountriesStore[props.abbreviation] = countryData\r\n                            setGraphCountriesStore(newGraphCountriesStore)\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err)\r\n                    })\r\n            }\r\n        } else if (props.locationType === 'state'){\r\n            if(props.abbreviation in graphStatesStore){\r\n                setCurrentGraphData(graphStatesStore[props.abbreviation])\r\n            } else {\r\n                axios.get(`https://api.covidtracking.com/v1/states/${props.abbreviation}/daily.json`)\r\n                    .then(res => {\r\n                        console.log(res)\r\n                        const data = res.data\r\n                        const formattedDataCases = []\r\n                        const formattedDataDeaths = []\r\n                        for( let i=0; i<data.length;i++){\r\n                            const dateString = data[i].date.toString()\r\n                            if (parseInt(dateString.slice(6))%3===0){\r\n                                formattedDataCases.push({\r\n                                    locationName: convertStateName(data[i].state),\r\n                                    x: new Date(parseInt(dateString.slice(0,4)), parseInt(dateString.slice(4,6))-1, parseInt(dateString.slice(6))),\r\n                                    y: data[i].positive\r\n                                })\r\n                                formattedDataDeaths.push({\r\n                                    locationName: convertStateName(data[i].state),\r\n                                    x: new Date(parseInt(dateString.slice(0,4)), parseInt(dateString.slice(4,6))-1, parseInt(dateString.slice(6))),\r\n                                    y: data[i].death\r\n                                })\r\n                            }\r\n                            \r\n                        }\r\n                        setCurrentGraphData({\r\n                            cases: formattedDataCases,\r\n                            deaths: formattedDataDeaths\r\n                        })\r\n                        let newGraphStatesStore = graphStatesStore\r\n                        newGraphStatesStore[props.abbreviation] = {\r\n                            cases: formattedDataCases,\r\n                            deaths: formattedDataDeaths\r\n                        }\r\n                        setGraphStatesStore(newGraphStatesStore)\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(err)\r\n                    })\r\n            }\r\n        }\r\n    },[])\r\n\r\n    useLayoutEffect(() => {\r\n        setCurrentGraphData({\r\n            cases:countryCasesData,\r\n            deaths:countryDeathsData\r\n        })\r\n    }, [countryCasesData, countryDeathsData])\r\n\r\n    const toggleClipBoard = () => {\r\n        if(clipBoardStatus){\r\n            setClipBoardStatus(false)\r\n            setClipBoardButton('Compare Clipboard')\r\n        } else {\r\n            setClipBoardStatus(true)\r\n            setClipBoardButton('Hide Clipboard')\r\n        }\r\n    }\r\n\r\n    const saveToClipBoard = () => {\r\n        setClipBoardData(currentGraphData)\r\n    }\r\n\r\n    if(!clipBoardStatus){\r\n        return(\r\n            <div className='graph-outer-container'>\r\n                <button onClick={saveToClipBoard}>Save To Clipboard</button>\r\n                <button onClick={toggleClipBoard}>{clipBoardButton}</button>\r\n                <GraphComponent data={{currentSet: currentGraphData.cases}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className='graph-outer-container'>\r\n            <button onClick={toggleClipBoard}>{clipBoardButton}</button>\r\n            <GraphComponent data={{currentSet: currentGraphData.cases, comparisonSet: clipBoardData.cases}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GraphContainer","C:\\Users\\eriks\\web-dev\\portfolio-projects\\covid-tracker\\src\\components\\GraphComponent.js",["67"],"import React, { useState } from 'react'\r\nimport * as V from 'victory'\r\nimport { abbreviateNum, commafyNum as commafy } from '../utils/numModifiers'\r\n\r\nconst VictoryZoomVoronoiContainer = V.createContainer('zoom', 'voronoi')\r\n\r\nconst Graph = ({data}) => {\r\n    console.log(data)\r\n\r\n    const [orientationOne, setOrientationOne] = useState('top')\r\n    const [orientationTwo, setOrientationTwo] = useState('bottom')\r\n\r\n    if (!data.comparisonSet){\r\n      return(\r\n        <div className='chart-container'>\r\n        <V.VictoryChart \r\n          width={800}\r\n          height={350}\r\n          padding={{left:75, bottom:60, right: 50}}\r\n          theme={V.VictoryTheme.material}\r\n          scale={{ x: 'time'}}\r\n          minDomain={{y:0}}\r\n          containerComponent={<V.VictoryVoronoiContainer\r\n            clipContainerComponent={<V.VictoryClipContainer clipPadding={{top: 10, right: 10}}/>}\r\n            voronoiDimension = 'x'\r\n          />}\r\n          \r\n        >\r\n\r\n        <V.VictoryAxis\r\n          tickCount={8}\r\n          style={{\r\n            ticks:{\r\n              size: 10\r\n            },\r\n            tickLabels:{\r\n              fontSize: 15,\r\n              padding: 3,\r\n            },\r\n            grid: {\r\n              strokeDasharray: 0\r\n            }\r\n          }}\r\n          tickLabelComponent={<V.VictoryLabel\r\n            angle={-45}\r\n            transform= 'translate(-20 15)'\r\n          />}\r\n        />\r\n\r\n        <V.VictoryAxis\r\n          dependentAxis\r\n          tickCount={8}\r\n          style={{\r\n            ticks:{\r\n              size: 10\r\n            },\r\n            tickLabels:{\r\n              fontSize: 15, \r\n              padding: 3\r\n            },\r\n            grid: {\r\n              strokeDasharray: 0\r\n            }\r\n          }}\r\n          tickFormat={abbreviateNum}\r\n        />\r\n        \r\n        <V.VictoryGroup\r\n          data={data.currentSet}\r\n          labels={({ datum }) => `${datum.x.getMonth() + 1}/${datum.x.getDate()}/${datum.x.getFullYear()}\\n${datum.locationName}: ${commafy(datum.y)}`}\r\n          labelComponent={\r\n            <V.VictoryTooltip\r\n            flyoutStyle={{\r\n              stroke:'4bc0c0',\r\n                strokeWidth: '2',\r\n              fill: 'black',\r\n              fillOpacity: '0.7'\r\n            }}\r\n            style={{\r\n              textAnchor: 'left',\r\n              fontSize: 12,\r\n              fill: 'lightgrey'\r\n            }}\r\n            orientation={'bottom'}\r\n            pointerLength={0}\r\n            constrainToVisibleArea\r\n            />\r\n          }\r\n          style={{\r\n            data:{ fill: '#4bc0c0'}\r\n          }}\r\n        >\r\n          <V.VictoryLine\r\n            style={{\r\n              data:{ strokeWidth: 3 }\r\n            }}\r\n            interpolation='natural'\r\n          />\r\n        </V.VictoryGroup>\r\n        \r\n      </V.VictoryChart>\r\n      </div>\r\n    )\r\n    }\r\n\r\n    return(\r\n        <div className='chart-container'>\r\n        <V.VictoryChart \r\n          width={800}\r\n          height={350}\r\n          padding={{left:75, bottom:60, right: 50}}\r\n          theme={V.VictoryTheme.material}\r\n          scale={{ x: 'time'}}\r\n          minDomain={{y:0}}\r\n          containerComponent={<V.VictoryVoronoiContainer\r\n            onActivated={(points, props) => {\r\n              if (points.length ===2){\r\n                if (points[0].y > points[1].y){\r\n                setOrientationOne('top')\r\n                setOrientationTwo('bottom')\r\n                } else {\r\n                  setOrientationOne('bottom')\r\n                  setOrientationTwo('top')\r\n                }\r\n              }\r\n              \r\n            }}\r\n            voronoiDimension = 'x'\r\n            minimumZoom={{x:1000000000,y:200}}\r\n          />}\r\n          \r\n        >\r\n\r\n        <V.VictoryAxis\r\n          tickCount={8}\r\n          style={{\r\n            ticks:{\r\n              size: 10\r\n            },\r\n            tickLabels:{\r\n              fontSize: 15,\r\n              padding: 3,\r\n            },\r\n            grid: {\r\n              strokeDasharray: 0\r\n            }\r\n          }}\r\n          tickLabelComponent={<V.VictoryLabel\r\n            angle={-45}\r\n            transform= 'translate(-20 15)'\r\n          />}\r\n        />\r\n\r\n        <V.VictoryAxis\r\n          dependentAxis\r\n          tickCount={8}\r\n          style={{\r\n            ticks:{\r\n              size: 10\r\n            },\r\n            tickLabels:{\r\n              fontSize: 15, \r\n              padding: 3\r\n            },\r\n            grid: {\r\n              strokeDasharray: 0\r\n            }\r\n          }}\r\n          tickFormat={abbreviateNum}\r\n        />\r\n        \r\n        <V.VictoryGroup\r\n          data={data.currentSet}\r\n          labels={({ datum }) => `${datum.x.getMonth() + 1}/${datum.x.getDate()}/${datum.x.getFullYear()}\\n${datum.locationName}: ${commafy(datum.y)}`}\r\n          labelComponent={\r\n            <V.VictoryTooltip\r\n            flyoutStyle={{\r\n              stroke:'4bc0c0',\r\n                strokeWidth: '2',\r\n              fill: 'black',\r\n              fillOpacity: '0.7'\r\n            }}\r\n            style={{\r\n              textAnchor: 'left',\r\n              fontSize: 12,\r\n              fill: 'lightgrey'\r\n            }}\r\n            orientation={orientationOne}\r\n            pointerLength={0}\r\n            constrainToVisibleArea\r\n            />\r\n          }\r\n          style={{\r\n            data:{ fill: '#4bc0c0'}\r\n          }}\r\n        >\r\n          <V.VictoryLine\r\n            style={{\r\n              data:{ strokeWidth: 3 }\r\n            }}\r\n            interpolation='natural'\r\n          />\r\n        </V.VictoryGroup>\r\n\r\n        <V.VictoryGroup\r\n          data={data.comparisonSet}\r\n          labels={({ datum }) => `${datum.x.getMonth() + 1}/${datum.x.getDate()}/${datum.x.getFullYear()}\\n${datum.locationName}: ${commafy(datum.y)}`}\r\n          labelComponent={\r\n            <V.VictoryTooltip\r\n              flyoutStyle={{\r\n                stroke:'ff6384',\r\n                strokeWidth: '2',\r\n                fill: 'black',\r\n                fillOpacity: '0.7'\r\n              }}\r\n              style={{\r\n                textAnchor: 'left',\r\n                fontSize: 12,\r\n                fill: 'lightgrey'\r\n              }}\r\n              orientation={orientationTwo}\r\n              pointerLength={0}\r\n              constrainToVisibleArea\r\n            />\r\n          }\r\n          style={{\r\n            data:{ fill: '#ff6384'}\r\n          }}\r\n        >\r\n          <V.VictoryLine\r\n            style={{\r\n              data:{ strokeWidth: 3 }\r\n            }}\r\n            interpolation='natural'\r\n          />\r\n        </V.VictoryGroup>\r\n        \r\n      </V.VictoryChart>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Graph",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":11,"column":23,"nodeType":"74","messageId":"75","endLine":11,"endColumn":35},{"ruleId":"72","severity":1,"message":"76","line":12,"column":20,"nodeType":"74","messageId":"75","endLine":12,"endColumn":29},{"ruleId":"72","severity":1,"message":"77","line":15,"column":26,"nodeType":"74","messageId":"75","endLine":15,"endColumn":41},{"ruleId":"72","severity":1,"message":"78","line":16,"column":23,"nodeType":"74","messageId":"75","endLine":16,"endColumn":35},{"ruleId":"79","severity":1,"message":"80","line":43,"column":8,"nodeType":"81","endLine":43,"endColumn":19,"suggestions":"82"},{"ruleId":"72","severity":1,"message":"83","line":11,"column":27,"nodeType":"74","messageId":"75","endLine":11,"endColumn":43},{"ruleId":"79","severity":1,"message":"84","line":140,"column":7,"nodeType":"81","endLine":140,"endColumn":9,"suggestions":"85"},{"ruleId":"72","severity":1,"message":"86","line":5,"column":7,"nodeType":"74","messageId":"75","endLine":5,"endColumn":34},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'setCountries' is assigned a value but never used.","Identifier","unusedVar","'setStates' is assigned a value but never used.","'setLocationType' is assigned a value but never used.","'setFilterStr' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataSet'. Either include it or remove the dependency array.","ArrayExpression",["89"],"'setClipBoardData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'graphCountriesStore', 'graphStatesStore', 'props.abbreviation', 'props.locationName', 'props.locationType', 'setGraphCountriesStore', and 'setGraphStatesStore'. Either include them or remove the dependency array. If 'setCurrentGraphData' needs the current value of 'props.abbreviation', you can also switch to useReducer instead of useState and read 'props.abbreviation' in the reducer.",["90"],"'VictoryZoomVoronoiContainer' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [dataSet, filterStr]",{"range":"95","text":"96"},"Update the dependencies array to be: [graphCountriesStore, graphStatesStore, props.abbreviation, props.locationName, props.locationType, setGraphCountriesStore, setGraphStatesStore]",{"range":"97","text":"98"},[1320,1331],"[dataSet, filterStr]",[7566,7568],"[graphCountriesStore, graphStatesStore, props.abbreviation, props.locationName, props.locationType, setGraphCountriesStore, setGraphStatesStore]"]